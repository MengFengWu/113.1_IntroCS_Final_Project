class LevelDrawer {
    field int time;

    method int getTime() { return time; }

    /*
        function explanation:
            drawLevel: draw tiles first time.
            eraseLevel: clear all tiles.
            updateLevel: update moving tiles.
    */

    constructor LevelDrawer new() {
        let time = 0;
        return this;
    }

    method void updateTime() {
        let time = time + 1;
        if(time > 10000) {
            let time = time - 10000;
        }
        return;
    }

    method void drawLevelMain(int level) {
        if(level = 1) {
            do drawLevel1();
        }
        if(level = 2) {
            do drawLevel2();
        }
        if(level = 3) {
            do drawLevel3();
        }
        if(level = 4) {
            do drawLevel4();
        }
        if(level = 5) {
            do drawLevel5();
        }
        return;
    }

    method void eraseLevelMain(int level) {
        if(level = 1) {
            do eraseLevel1();
        }
        if(level = 2) {
            do eraseLevel2();
        }
        if(level = 3) {
            do eraseLevel3();
        }
        if(level = 4) {
            do eraseLevel4();
        }
        if(level = 5) {
            do eraseLevel5();
        }
        return;
    }

    method void updateLevelMain(int level) {
        if(level = 1) {
            do updateLevel1();
        }
        if(level = 2) {
            do updateLevel2();
        }
        return;
    }

    method void drawLevel1() {
        do Screen.setColor(true);
        do drawRectangle(0, 450, 127, 137); // mid floor
        do drawRectangle(0, 25, 122, 152); // AmongUs
        do drawRectangle(470, 510, 194, 254); // right step up
        do drawRectangle(50, 90, 214, 254); // first step
        do drawRectangle(50, 80, 158, 182); // AmongUsEye
        do drawRectangle(125, 145, 174, 254); // second step
        do drawRectangle(110, 145, 127, 146); // second step head
        do drawRectangle(200, 280, 234, 254); // third step
        // do drawRectangle(200, 250, 160, 162); // place item 1
        do drawRectangle(300, 330, 170, 230); // fourth step
        do drawRectangle(380, 420, 170, 254); // fifth step
        // to upperhalf
        do drawRectangle(380, 430, 112, 127); // up1
        do drawRectangle(460, 510, 55, 75); // up2
        do drawRectangle(368, 370, 30, 85); // wall b/w 13
        do drawRectangle(300, 360, 30, 50); // up3
        do drawRectangle(180, 240, 30, 50); // up4
        do drawRectangle(120, 122, 30, 127); // wall b/w 45
        // end stairs
        do drawRectangle(0, 25, 20, 130); // stair 1
        do drawRectangle(0, 55, 52, 130); // stair 2
        do drawRectangle(0, 85, 87, 130); // stair 3

        do updateLevel1();
        return;
    }

    method void updateLevel1() {
        do drawEatThis(true);
        do drawJump(true);
        do drawKeyboard(true);
        do drawGoUP(true);
        return;
    }

    method void eraseLevel1() {
        /** Remember to erase after finish design*/
        do Screen.setColor(false);
        do drawRectangle(0, 450, 127, 137); // mid floor
        do drawRectangle(0, 25, 122, 152); // AmongUs
        do drawRectangle(470, 510, 194, 254); // right step up
        do drawRectangle(50, 90, 214, 254); // first step
        do drawRectangle(50, 80, 158, 182); // AmongUsEye
        do drawRectangle(125, 145, 174, 254); // second step
        do drawRectangle(110, 145, 127, 146); // second step head
        do drawRectangle(200, 280, 234, 254); // third step
        // do drawRectangle(200, 250, 160, 162); // place item 1
        do drawRectangle(300, 330, 170, 230); // fourth step
        do drawRectangle(380, 420, 170, 254); // fifth step
        // to upperhalf
        do drawRectangle(380, 430, 112, 127); // up1
        do drawRectangle(460, 510, 55, 75); // up2
        do drawRectangle(368, 370, 30, 85); // wall b/w 13
        do drawRectangle(300, 360, 30, 50); // up3
        do drawRectangle(180, 240, 30, 50); // up4
        do drawRectangle(120, 122, 30, 127); // wall b/w 45
        // end stairs
        do drawRectangle(0, 25, 20, 130); // stair 1
        do drawRectangle(0, 55, 52, 130); // stair 2
        do drawRectangle(0, 85, 87, 130); // stair 3

        do drawEatThis(false);
        do drawJump(false);
        do drawKeyboard(false);
        do drawGoUP(false);
        return;
    }

    method void drawLevel2() {
        do Screen.setColor(true);
        do drawRectangle(35, 80, 239, 254); // lvl2 1
        //do drawRectangle(470, 510, 190, 200); // lvl2 2
        do drawRectangle(410, 450, 85, 95); // lvl2 4
        do drawRectangle(10, 50, 130, 140); // place item 2
        do drawRectangle(10, 50, 20, 30); // lvl2 5

        do updateLevel2();
        return;
    }

    method void eraseLevel2() {
        /** Remember to erase after finish design*/
        do Screen.setColor(false);
        do drawRectangle(35, 80, 239, 254); // lvl2 1
        //do drawRectangle(470, 510, 190, 200); // lvl2 2
        do drawRectangle(410, 450, 85, 95); // lvl2 4
        do drawRectangle(10, 50, 130, 140); // place item 2
        do drawRectangle(10, 50, 20, 30); // lvl2 5
        do updateMovingSquare(100, 170, 200, 220, 220, 290, 200, 220, 300, true, false); // moving plate 1
        do updateMovingSquare(400, 470, 200, 220, 310, 380, 200, 220, 300, true, false); // moving plate 2
        do updateMovingSquare(180, 185, 130, 180, 180, 185, 204, 254, 86, true, false); // moving obstacle 1
        do updateMovingSquare(420, 460, 170, 180, 460, 500, 80, 180, 173, true, false); // lvl2 3
        do updateMovingSquare(320, 360, 110, 130, 320, 360, 30, 130, 160, true, false); // expand stand 1
        do updateMovingSquare(230, 270, 30, 130, 230, 270, 110, 130, 160, true, false); // expand stand 2
        do updateMovingSquare(105, 125, 110, 130, 60, 170, 50, 130, 270, true, false); // expand stand 3
        return;
    }

    method void updateLevel2() {
        do updateTime();
        do updateMovingSquare(100, 170, 200, 220, 220, 290, 200, 220, 300, true, true); // moving plate 1
        do updateMovingSquare(400, 470, 200, 220, 310, 380, 200, 220, 300, true, true); // moving plate 2
        do updateMovingSquare(180, 185, 130, 180, 180, 185, 204, 254, 86, true, true); // moving obstacle 1
        do updateMovingSquare(420, 460, 170, 180, 460, 500, 80, 180, 173, true, true); // lvl2 3
        do updateMovingSquare(320, 360, 110, 130, 320, 360, 30, 130, 160, true, true); // expand stand 1
        do updateMovingSquare(230, 270, 30, 130, 230, 270, 110, 130, 160, true, true); // expand stand 2
        do updateMovingSquare(105, 125, 110, 130, 60, 170, 50, 130, 270, true, true); // expand stand 3

        return;
    }

    method void drawLevel3() {
        do Screen.setColor(true);
        do drawRectangle(20, 90, 244, 254); // lvl3 1
        do drawTriangle(90, 254, 160, 184, true); // tri 1
        do drawRectangle(160, 210, 184, 194); // lvl3 2
        do drawRectangle(280-5, 340-5, 214, 254); // lvl3 3
        do drawTriangle(220, 254, 280-5, 214, true); // tri 2
        do drawTriangle(340-5, 214, 390, 254, true); // tri 3
        do drawRectangle(460, 510, 204, 254); // lvl3 4
        do drawTriangle(420, 254, 460, 204, true); // tri 4


        // do drawRectangle(0, 100, 100, 250);
        // do drawTriangle(100, 100, 400, 250, true);
        // do drawTriangle(450, 250, 500, 200, true);
        return;
    }

    method void eraseLevel3() {
        do Screen.setColor(false);
        do drawRectangle(20, 90, 244, 254); // lvl3 1
        do drawTriangle(90, 254, 160, 184, true); // tri 1
        do drawRectangle(160, 210, 184, 194); // lvl3 2
        do drawRectangle(280-5, 340-5, 214, 254); // lvl3 3
        do drawTriangle(220, 254, 280-5, 214, true); // tri 2
        do drawTriangle(340-5, 214, 390, 254, true); // tri 3
        do drawRectangle(460, 510, 204, 254); // lvl3 4
        do drawTriangle(420, 254, 460, 204, true); // tri 4


        // do drawRectangle(0, 100, 100, 250);
        // do drawTriangle(100, 100, 400, 250, true);
        // do drawTriangle(450, 250, 500, 200, true);
        return;
    }

    method void drawLevel4() {
        do Screen.setColor(true);
        do drawRectangle(0, 510, 0, 254); // dark mode

        do drawRectangle(0, 450, 122, 132); // mid floor
        do drawRectangle(0, 25, 122, 152); // AmongUs
        do drawRectangle(470, 510, 184, 254); // right step up
        do drawRectangle(50, 90, 214, 254); // first step
        do drawRectangle(50, 90, 158, 182); // AmongUsEye
        do drawRectangle(125, 145, 164, 254); // second step
        do drawRectangle(110, 145, 122, 139); // second step head
        do drawRectangle(200, 280, 234, 254); // third step
        do drawRectangle(300, 330, 170, 230); // fourth step
        do drawRectangle(380, 420, 170, 254); // fifth step

        do drawRectangle(0, 70, 50, 130); // TEST ONLY
        return;
    }

    method void eraseLevel4() {
        do Screen.setColor(false);
        do drawRectangle(0, 510, 0, 254);
        return;
    }

    method void eraseLevel5() {
        do Screen.setColor(false);
        do drawRectangle(0, 70, 50, 130);
        return;
    }

    method void drawLevel5() {
        do Screen.setColor(true);
        do drawRectangle(0, 70, 50, 130);
        return;
    }

    // API for moving tiles

    method void drawRectangle(int rxL, int rxR, int ryU, int ryD) {
        do Screen.drawRectangle(rxL, ryU, rxR, ryD);
        return;
    }

    method void updateMovingSquare(int rxLi, int rxRi, int ryUi, int ryDi, 
                                    int rxLf, int rxRf, int ryUf, int ryDf,
                                    int duration, bool back, bool set) {
        var int xLp, xRp, yUp, yDp;
        var int xLn, xRn, yUn, yDn;
        var int pTime;
        var int progress;
        let pTime = time - 1;
        // calculate last step
        if(back = false) {
            let progress = pTime / duration;
            let progress = (pTime - (progress * duration));
            let progress = (progress * 50) / duration;
            let xLp = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
            let xRp = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
            let yUp = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
            let yDp = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
        }
        if(back = true) {
            let progress = pTime / (2 * duration);
            let progress = (pTime - (progress * (2 * duration)));
            let progress = (progress * 50) / duration;
            if(progress > 50) {
                let progress = progress - 50;
                let xLp = ((rxLi * progress) + (rxLf * (50 - progress))) / 50;
                let xRp = ((rxRi * progress) + (rxRf * (50 - progress))) / 50;
                let yUp = ((ryUi * progress) + (ryUf * (50 - progress))) / 50;
                let yDp = ((ryDi * progress) + (ryDf * (50 - progress))) / 50;
            }
            else {
                let xLp = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
                let xRp = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
                let yUp = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
                let yDp = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
            }
        }
        // calculate next step
        if(back = false) {
            let progress = time / duration;
            let progress = (time - (progress * duration));
            let progress = (progress * 50) / duration;
            let xLn = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
            let xRn = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
            let yUn = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
            let yDn = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
        }
        if(back = true) {
            let progress = time / (2 * duration);
            let progress = (time - (progress * (2 * duration)));
            let progress = (progress * 50) / duration;
            if(progress > 50) {
                let progress = progress - 50;
                let xLn = ((rxLi * progress) + (rxLf * (50 - progress))) / 50;
                let xRn = ((rxRi * progress) + (rxRf * (50 - progress))) / 50;
                let yUn = ((ryUi * progress) + (ryUf * (50 - progress))) / 50;
                let yDn = ((ryDi * progress) + (ryDf * (50 - progress))) / 50;
            }
            else {
                let xLn = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
                let xRn = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
                let yUn = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
                let yDn = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
            }
        }
        do Screen.setColor(false);
        do Screen.drawRectangle(xLp, yUp, xRp, yDp);
        
        if(set = true) {
            do Screen.setColor(true);
        }
        else {
            do Screen.setColor(false);
        }
        do Screen.drawRectangle(xLn, yUn, xRn, yDn);
        do Screen.setColor(true);
        return;
    }

    method void drawTriangle(int x1, int y1, int x2, int y2, bool fill) {
        var int start, end, step;
        if(fill = false) {
            do Screen.drawLine(x1, y1, x2, y2);
        }
        if(fill = true) {
            if(y1 < y2) {
                do drawTriangleAux(x1, y1, x2, y2, y2);
            }
            else {
                do drawTriangleAux(x1, y1, x2, y2, y1);
            }
        }
        return;
    }

    method void drawTriangleAux(int x1, int y1, int x2, int y2, int bottom) {
        var int midx, midy;
        let midx = (x1 + x2) / 2;
        let midy = (y1 + y2) / 2;
        if(x1 > x2) {
            return;
        }
        else {
            do Screen.drawLine(midx, bottom, midx, midy);
            do drawTriangleAux(x1, y1, midx - 1, midy, bottom);
            do drawTriangleAux(midx + 1, midy, x2, y2, bottom);
        }
        return;
    }

    // Cool text & stuff
    method void drawEatThis(bool set) {
        var int memAddress; 
        let memAddress = 16384 + (192 * 32) + (192 / 16);
        // column 0
        do Memory.poke(memAddress +128, 31744 & set);
        do Memory.poke(memAddress +160, -7048 & set);
        do Memory.poke(memAddress +192, -15288 & set);
        do Memory.poke(memAddress +224, 19560 & set);
        do Memory.poke(memAddress +256, 30776 & set);
        do Memory.poke(memAddress +288, 536 & set);
        do Memory.poke(memAddress +320, 1008 & set);
        do Memory.poke(memAddress +416, 64 & set);
        do Memory.poke(memAddress +448, 8256 & set);
        do Memory.poke(memAddress +480, 8260 & set);
        do Memory.poke(memAddress +512, 16964 & set);
        do Memory.poke(memAddress +544, 20468 & set);
        do Memory.poke(memAddress +576, -30324 & set);
        do Memory.poke(memAddress +608, -26357 & set);
        do Memory.poke(memAddress +640, -28280 & set);
        do Memory.poke(memAddress +672, 360 & set);
        do Memory.poke(memAddress +704, 56 & set);
        // column 1
        do Memory.poke(memAddress +1, 8 & set);
        do Memory.poke(memAddress +33, 8 & set);
        do Memory.poke(memAddress +65, 120 & set);
        do Memory.poke(memAddress +97, 28 & set);
        do Memory.poke(memAddress +129, 14 & set);
        do Memory.poke(memAddress +161, 8 & set);
        do Memory.poke(memAddress +193, 203 & set);
        do Memory.poke(memAddress +225, 120 & set);
        do Memory.poke(memAddress +257, 48 & set);
        do Memory.poke(memAddress +353, 896 & set);
        do Memory.poke(memAddress +385, 768 & set);
        do Memory.poke(memAddress +417, 780 & set);
        do Memory.poke(memAddress +449, 1798 & set);
        do Memory.poke(memAddress +481, 1542 & set);
        do Memory.poke(memAddress +513, 124 & set);
        do Memory.poke(memAddress +545, 3136 & set);
        do Memory.poke(memAddress +577, 3168 & set);
        do Memory.poke(memAddress +609, 48 & set);
        do Memory.poke(memAddress +641, 12 & set);
        do Memory.poke(memAddress +737, ~32767 & set);
        do Memory.poke(memAddress +769, 32256 & set);
        // column 2
        do Memory.poke(memAddress +130, 1792 & set);
        do Memory.poke(memAddress +162, 7936 & set);
        do Memory.poke(memAddress +194, 896 & set);
        do Memory.poke(memAddress +226, 1728 & set);
        do Memory.poke(memAddress +258, 1088 & set);
        do Memory.poke(memAddress +290, 1024 & set);
        do Memory.poke(memAddress +322, 1024 & set);
        do Memory.poke(memAddress +354, 1024 & set);
        do Memory.poke(memAddress +386, 1024 & set);
        do Memory.poke(memAddress +418, 1024 & set);
        do Memory.poke(memAddress +450, 1564 & set);
        do Memory.poke(memAddress +482, 562 & set);
        do Memory.poke(memAddress +514, 545 & set);
        do Memory.poke(memAddress +546, 307 & set);
        do Memory.poke(memAddress +578, 406 & set);
        do Memory.poke(memAddress +610, 252 & set);
        do Memory.poke(memAddress +642, 24 & set);
        do Memory.poke(memAddress +674, 4 & set);
        do Memory.poke(memAddress +706, 6 & set);
        do Memory.poke(memAddress +738, 3 & set);
        return;
    }

    method void drawJump(bool set) {
        var int memAddress; 
        let memAddress = 16384 + (96 * 32) + (448 / 16);
        // column 0
        do Memory.poke(memAddress, 14336 & set);
        do Memory.poke(memAddress +32, 1920 & set);
        do Memory.poke(memAddress +64, 116 & set);
        do Memory.poke(memAddress +96, 28 & set);
        do Memory.poke(memAddress +128, 60 & set);
        do Memory.poke(memAddress +160, 232 & set);
        do Memory.poke(memAddress +192, 392 & set);
        do Memory.poke(memAddress +224, 776 & set);
        do Memory.poke(memAddress +256, 1032 & set);
        do Memory.poke(memAddress +288, 2064 & set);
        do Memory.poke(memAddress +320, 4112 & set);
        do Memory.poke(memAddress +352, 12304 & set);
        do Memory.poke(memAddress +384, 8192 & set);
        do Memory.poke(memAddress +416, 24576 & set);
        do Memory.poke(memAddress +448, 16384 & set);
        do Memory.poke(memAddress +480, -16384 & set);
        do Memory.poke(memAddress +512, ~32767 & set);
        do Memory.poke(memAddress +2176, ~32767 & set);
        do Memory.poke(memAddress +2208, ~32767 & set);
        do Memory.poke(memAddress +2240, ~32767 & set);
        do Memory.poke(memAddress +2272, 16384 & set);
        do Memory.poke(memAddress +2304, 24576 & set);
        do Memory.poke(memAddress +2336, 8192 & set);
        do Memory.poke(memAddress +2368, 4096 & set);
        do Memory.poke(memAddress +2400, 4096 & set);
        do Memory.poke(memAddress +2432, 2048 & set);
        do Memory.poke(memAddress +2464, 1024 & set);
        do Memory.poke(memAddress +2496, 1536 & set);
        do Memory.poke(memAddress +2528, 768 & set);
        do Memory.poke(memAddress +2560, 256 & set);
        do Memory.poke(memAddress +2592, 128 & set);
        do Memory.poke(memAddress +2624, 96 & set);
        do Memory.poke(memAddress +2656, 48 & set);
        do Memory.poke(memAddress +2688, 24 & set);
        do Memory.poke(memAddress +2720, 6 & set);
        do Memory.poke(memAddress +2752, 1 & set);
        // column 1
        do Memory.poke(memAddress +193, -16384 & set);
        do Memory.poke(memAddress +225, 30720 & set);
        do Memory.poke(memAddress +257, -14592 & set);
        do Memory.poke(memAddress +289, -32640 & set);
        do Memory.poke(memAddress +321, ~32767 & set);
        do Memory.poke(memAddress +481, 6144 & set);
        do Memory.poke(memAddress +513, 12288 & set);
        do Memory.poke(memAddress +545, -8191 & set);
        do Memory.poke(memAddress +577, 1 & set);
        do Memory.poke(memAddress +609, 1 & set);
        do Memory.poke(memAddress +641, 1 & set);
        do Memory.poke(memAddress +673, 2 & set);
        do Memory.poke(memAddress +705, 1026 & set);
        do Memory.poke(memAddress +737, 1026 & set);
        do Memory.poke(memAddress +769, 1028 & set);
        do Memory.poke(memAddress +801, 1028 & set);
        do Memory.poke(memAddress +833, 3076 & set);
        do Memory.poke(memAddress +865, 2052 & set);
        do Memory.poke(memAddress +897, 6148 & set);
        do Memory.poke(memAddress +929, 4100 & set);
        do Memory.poke(memAddress +961, 12292 & set);
        do Memory.poke(memAddress +993, -8188 & set);
        do Memory.poke(memAddress +1025, 4 & set);
        do Memory.poke(memAddress +1057, 4 & set);
        do Memory.poke(memAddress +1089, 4 & set);
        do Memory.poke(memAddress +1121, 4 & set);
        do Memory.poke(memAddress +1153, 4 & set);
        do Memory.poke(memAddress +1185, 4 & set);
        do Memory.poke(memAddress +1217, 8 & set);
        do Memory.poke(memAddress +1249, 4104 & set);
        do Memory.poke(memAddress +1281, 12296 & set);
        do Memory.poke(memAddress +1313, 12296 & set);
        do Memory.poke(memAddress +1345, 26632 & set);
        do Memory.poke(memAddress +1377, 18440 & set);
        do Memory.poke(memAddress +1409, -14328 & set);
        do Memory.poke(memAddress +1441, -29688 & set);
        do Memory.poke(memAddress +1473, 1032 & set);
        do Memory.poke(memAddress +1505, 1032 & set);
        do Memory.poke(memAddress +1537, 1032 & set);
        do Memory.poke(memAddress +1569, 1032 & set);
        do Memory.poke(memAddress +1601, 1032 & set);
        do Memory.poke(memAddress +1633, 1032 & set);
        do Memory.poke(memAddress +1665, 4 & set);
        do Memory.poke(memAddress +1697, 4 & set);
        do Memory.poke(memAddress +1729, 4 & set);
        do Memory.poke(memAddress +1761, 4 & set);
        do Memory.poke(memAddress +1793, 4 & set);
        do Memory.poke(memAddress +1825, -8188 & set);
        do Memory.poke(memAddress +1857, 8196 & set);
        do Memory.poke(memAddress +1889, 4100 & set);
        do Memory.poke(memAddress +1921, 4098 & set);
        do Memory.poke(memAddress +1953, 4096 & set);
        do Memory.poke(memAddress +1985, 8194 & set);
        do Memory.poke(memAddress +2017, 8194 & set);
        do Memory.poke(memAddress +2049, -8191 & set);
        do Memory.poke(memAddress +2081, 8193 & set);
        do Memory.poke(memAddress +2113, 8193 & set);
        do Memory.poke(memAddress +2145, 24577 & set);
        do Memory.poke(memAddress +2177, 16384 & set);
        do Memory.poke(memAddress +2209, 16384 & set);
        do Memory.poke(memAddress +2401, ~32767 & set);
        // column 2
        do Memory.poke(memAddress +130, 32 & set);
        do Memory.poke(memAddress +162, 62 & set);
        do Memory.poke(memAddress +194, 1 & set);
        do Memory.poke(memAddress +354, 1 & set);
        do Memory.poke(memAddress +386, 1 & set);
        do Memory.poke(memAddress +418, 1 & set);
        do Memory.poke(memAddress +450, 1 & set);
        do Memory.poke(memAddress +482, 1 & set);
        do Memory.poke(memAddress +514, 1 & set);
        do Memory.poke(memAddress +546, 1 & set);
        do Memory.poke(memAddress +642, 64 & set);
        do Memory.poke(memAddress +674, 192 & set);
        do Memory.poke(memAddress +706, 128 & set);
        do Memory.poke(memAddress +738, 128 & set);
        do Memory.poke(memAddress +770, 128 & set);
        do Memory.poke(memAddress +802, 128 & set);
        do Memory.poke(memAddress +834, 128 & set);
        do Memory.poke(memAddress +866, 192 & set);
        do Memory.poke(memAddress +898, 96 & set);
        do Memory.poke(memAddress +930, 32 & set);
        do Memory.poke(memAddress +962, 24 & set);
        do Memory.poke(memAddress +994, 15 & set);
        do Memory.poke(memAddress +1026, 3 & set);
        do Memory.poke(memAddress +1186, 192 & set);
        do Memory.poke(memAddress +1218, 192 & set);
        do Memory.poke(memAddress +1250, 192 & set);
        do Memory.poke(memAddress +1282, 160 & set);
        do Memory.poke(memAddress +1314, 416 & set);
        do Memory.poke(memAddress +1346, 272 & set);
        do Memory.poke(memAddress +1378, 784 & set);
        do Memory.poke(memAddress +1410, 520 & set);
        do Memory.poke(memAddress +1442, 1545 & set);
        do Memory.poke(memAddress +1474, 1039 & set);
        do Memory.poke(memAddress +1506, 3078 & set);
        do Memory.poke(memAddress +1538, 6 & set);
        do Memory.poke(memAddress +1570, 4 & set);
        do Memory.poke(memAddress +1794, 31 & set);
        do Memory.poke(memAddress +1826, 49 & set);
        do Memory.poke(memAddress +1858, 96 & set);
        do Memory.poke(memAddress +1890, 64 & set);
        do Memory.poke(memAddress +1922, 64 & set);
        do Memory.poke(memAddress +1954, 64 & set);
        do Memory.poke(memAddress +1986, 32 & set);
        do Memory.poke(memAddress +2018, 30 & set);
        do Memory.poke(memAddress +2050, 3 & set);
        do Memory.poke(memAddress +2370, 28 & set);
        do Memory.poke(memAddress +2402, 31 & set);
        do Memory.poke(memAddress +2434, 15 & set);
        do Memory.poke(memAddress +2466, 15 & set);
        do Memory.poke(memAddress +2498, 14 & set);
        do Memory.poke(memAddress +2530, 14 & set);
        do Memory.poke(memAddress +2562, 12 & set);
        do Memory.poke(memAddress +2594, 12 & set);
        do Memory.poke(memAddress +2626, 12 & set);
        do Memory.poke(memAddress +2722, 12 & set);
        do Memory.poke(memAddress +2754, 12 & set);
        return;
    }

    method void drawKeyboard(bool set) {
        var int memAddress; 
        let memAddress = 16384 + (64 * 32) + (160 / 16);
        // column 0
        do Memory.poke(memAddress +128, 8 & set);
        do Memory.poke(memAddress +160, -4088 & set);
        do Memory.poke(memAddress +192, 4120 & set);
        do Memory.poke(memAddress +224, 4112 & set);
        do Memory.poke(memAddress +256, 4112 & set);
        do Memory.poke(memAddress +288, -4080 & set);
        do Memory.poke(memAddress +320, 16 & set);
        do Memory.poke(memAddress +352, 16 & set);
        do Memory.poke(memAddress +384, 16 & set);
        do Memory.poke(memAddress +416, 16 & set);
        do Memory.poke(memAddress +448, 16 & set);
        do Memory.poke(memAddress +480, 16 & set);
        do Memory.poke(memAddress +512, 16 & set);
        do Memory.poke(memAddress +544, -4080 & set);
        do Memory.poke(memAddress +576, 24 & set);
        do Memory.poke(memAddress +608, 15 & set);
        do Memory.poke(memAddress +1024, ~32767 & set);
        do Memory.poke(memAddress +1056, -4096 & set);
        do Memory.poke(memAddress +1088, 4094 & set);
        do Memory.poke(memAddress +1120, 2 & set);
        do Memory.poke(memAddress +1152, 2 & set);
        do Memory.poke(memAddress +1184, 2 & set);
        do Memory.poke(memAddress +1216, 2 & set);
        do Memory.poke(memAddress +1248, 2 & set);
        do Memory.poke(memAddress +1280, 2 & set);
        do Memory.poke(memAddress +1312, 2 & set);
        do Memory.poke(memAddress +1344, -32766 & set);
        do Memory.poke(memAddress +1376, -30 & set);
        do Memory.poke(memAddress +1408, 30 & set);
        do Memory.poke(memAddress +1440, 2 & set);
        do Memory.poke(memAddress +1472, 4 & set);
        do Memory.poke(memAddress +1504, 4 & set);
        do Memory.poke(memAddress +1536, -16376 & set);
        do Memory.poke(memAddress +1568, 16376 & set);
        // column 1
        do Memory.poke(memAddress +33, 24576 & set);
        do Memory.poke(memAddress +65, 6144 & set);
        do Memory.poke(memAddress +97, 1536 & set);
        do Memory.poke(memAddress +129, 1024 & set);
        do Memory.poke(memAddress +161, 1027 & set);
        do Memory.poke(memAddress +193, 1024 & set);
        do Memory.poke(memAddress +225, 1024 & set);
        do Memory.poke(memAddress +257, 1024 & set);
        do Memory.poke(memAddress +289, -1023 & set);
        do Memory.poke(memAddress +321, 1055 & set);
        do Memory.poke(memAddress +353, 2096 & set);
        do Memory.poke(memAddress +385, 2080 & set);
        do Memory.poke(memAddress +417, 2080 & set);
        do Memory.poke(memAddress +449, 6176 & set);
        do Memory.poke(memAddress +481, -4064 & set);
        do Memory.poke(memAddress +513, 62 & set);
        do Memory.poke(memAddress +545, 3 & set);
        do Memory.poke(memAddress +929, -512 & set);
        do Memory.poke(memAddress +961, 992 & set);
        do Memory.poke(memAddress +993, 28 & set);
        do Memory.poke(memAddress +1025, 3075 & set);
        do Memory.poke(memAddress +1057, 15360 & set);
        do Memory.poke(memAddress +1089, 1536 & set);
        do Memory.poke(memAddress +1121, 512 & set);
        do Memory.poke(memAddress +1153, 32256 & set);
        do Memory.poke(memAddress +1185, 16384 & set);
        do Memory.poke(memAddress +1217, 24576 & set);
        do Memory.poke(memAddress +1249, 14336 & set);
        do Memory.poke(memAddress +1313, -2048 & set);
        do Memory.poke(memAddress +1345, 2047 & set);
        do Memory.poke(memAddress +1377, 0 & set);
        do Memory.poke(memAddress +1473, -8192 & set);
        do Memory.poke(memAddress +1505, 16128 & set);
        do Memory.poke(memAddress +1537, 255 & set);
        // column 2
        do Memory.poke(memAddress +2, 7 & set);
        do Memory.poke(memAddress +226, 8 & set);
        do Memory.poke(memAddress +258, 15 & set);
        do Memory.poke(memAddress +290, 1 & set);
        do Memory.poke(memAddress +418, 224 & set);
        do Memory.poke(memAddress +450, 56 & set);
        do Memory.poke(memAddress +482, 15 & set);
        do Memory.poke(memAddress +834, ~32767 & set);
        do Memory.poke(memAddress +866, -256 & set);
        do Memory.poke(memAddress +898, 252 & set);
        do Memory.poke(memAddress +930, 12291 & set);
        do Memory.poke(memAddress +962, 14336 & set);
        do Memory.poke(memAddress +994, 19512 & set);
        do Memory.poke(memAddress +1026, 29743 & set);
        do Memory.poke(memAddress +1058, -13277 & set);
        do Memory.poke(memAddress +1090, -31710 & set);
        do Memory.poke(memAddress +1122, -31682 & set);
        do Memory.poke(memAddress +1154, 1030 & set);
        do Memory.poke(memAddress +1186, 4 & set);
        do Memory.poke(memAddress +1218, -16380 & set);
        do Memory.poke(memAddress +1250, 16128 & set);
        do Memory.poke(memAddress +1282, 510 & set);
        do Memory.poke(memAddress +1314, 1 & set);
        do Memory.poke(memAddress +1378, -8192 & set);
        do Memory.poke(memAddress +1410, 7680 & set);
        do Memory.poke(memAddress +1442, 960 & set);
        do Memory.poke(memAddress +1474, 63 & set);
        // column 3
        do Memory.poke(memAddress +739, -8192 & set);
        do Memory.poke(memAddress +771, 16128 & set);
        do Memory.poke(memAddress +803, 248 & set);
        do Memory.poke(memAddress +835, 7 & set);
        do Memory.poke(memAddress +867, -8192 & set);
        do Memory.poke(memAddress +899, 6144 & set);
        do Memory.poke(memAddress +931, -1808 & set);
        do Memory.poke(memAddress +963, 6160 & set);
        do Memory.poke(memAddress +995, -3824 & set);
        do Memory.poke(memAddress +1027, 25008 & set);
        do Memory.poke(memAddress +1059, 224 & set);
        do Memory.poke(memAddress +1091, ~32767 & set);
        do Memory.poke(memAddress +1123, -2047 & set);
        do Memory.poke(memAddress +1155, 1984 & set);
        do Memory.poke(memAddress +1187, 60 & set);
        do Memory.poke(memAddress +1219, 3 & set);
        do Memory.poke(memAddress +1251, ~32767 & set);
        do Memory.poke(memAddress +1283, -2048 & set);
        do Memory.poke(memAddress +1315, 3840 & set);
        do Memory.poke(memAddress +1347, 504 & set);
        do Memory.poke(memAddress +1379, 15 & set);
        // column 4
        do Memory.poke(memAddress +644, -512 & set);
        do Memory.poke(memAddress +676, 960 & set);
        do Memory.poke(memAddress +708, 112 & set);
        do Memory.poke(memAddress +740, 31 & set);
        do Memory.poke(memAddress +868, 0 & set);
        do Memory.poke(memAddress +932, 0 & set);
        do Memory.poke(memAddress +964, 3 & set);
        do Memory.poke(memAddress +996, -8191 & set);
        do Memory.poke(memAddress +1028, 16256 & set);
        do Memory.poke(memAddress +1060, 240 & set);
        do Memory.poke(memAddress +1092, 15 & set);
        do Memory.poke(memAddress +1124, 0 & set);
        do Memory.poke(memAddress +1156, ~32767 & set);
        do Memory.poke(memAddress +1188, -512 & set);
        do Memory.poke(memAddress +1220, 496 & set);
        do Memory.poke(memAddress +1252, 31 & set);
        do Memory.poke(memAddress +1284, 0 & set);
        // column 5
        do Memory.poke(memAddress +581, 8128 & set);
        do Memory.poke(memAddress +613, 29310 & set);
        do Memory.poke(memAddress +645, -15357 & set);
        do Memory.poke(memAddress +677, 1024 & set);
        do Memory.poke(memAddress +709, 3072 & set);
        do Memory.poke(memAddress +741, 2048 & set);
        do Memory.poke(memAddress +773, 2048 & set);
        do Memory.poke(memAddress +805, 6144 & set);
        do Memory.poke(memAddress +837, 4096 & set);
        do Memory.poke(memAddress +869, 4096 & set);
        do Memory.poke(memAddress +901, 4096 & set);
        do Memory.poke(memAddress +933, 6144 & set);
        do Memory.poke(memAddress +965, 6128 & set);
        do Memory.poke(memAddress +997, 8207 & set);
        do Memory.poke(memAddress +1029, 24576 & set);
        do Memory.poke(memAddress +1061, -16384 & set);
        do Memory.poke(memAddress +1093, -16384 & set);
        do Memory.poke(memAddress +1125, 32704 & set);
        do Memory.poke(memAddress +1157, 127 & set);
        do Memory.poke(memAddress +1189, 0 & set);
        // column 6
        do Memory.poke(memAddress +614, -16384 & set);
        do Memory.poke(memAddress +646, -8189 & set);
        do Memory.poke(memAddress +678, 12302 & set);
        do Memory.poke(memAddress +710, 4120 & set);
        do Memory.poke(memAddress +742, 4112 & set);
        do Memory.poke(memAddress +774, 4112 & set);
        do Memory.poke(memAddress +806, -28648 & set);
        do Memory.poke(memAddress +838, -28664 & set);
        do Memory.poke(memAddress +870, -12280 & set);
        do Memory.poke(memAddress +902, 28684 & set);
        do Memory.poke(memAddress +934, 24580 & set);
        do Memory.poke(memAddress +966, 24580 & set);
        do Memory.poke(memAddress +998, -8188 & set);
        do Memory.poke(memAddress +1030, -20474 & set);
        do Memory.poke(memAddress +1062, 4098 & set);
        do Memory.poke(memAddress +1094, 4099 & set);
        do Memory.poke(memAddress +1126, -4096 & set);
        // column 7
        do Memory.poke(memAddress +615, -16384 & set);
        do Memory.poke(memAddress +647, 16385 & set);
        do Memory.poke(memAddress +679, 16385 & set);
        do Memory.poke(memAddress +711, 24577 & set);
        do Memory.poke(memAddress +743, 8193 & set);
        do Memory.poke(memAddress +775, 8193 & set);
        do Memory.poke(memAddress +807, 8193 & set);
        do Memory.poke(memAddress +839, 12288 & set);
        do Memory.poke(memAddress +871, -20480 & set);
        do Memory.poke(memAddress +903, 24576 & set);
        do Memory.poke(memAddress +935, 8192 & set);
        do Memory.poke(memAddress +967, 8192 & set);
        do Memory.poke(memAddress +999, 8192 & set);
        do Memory.poke(memAddress +1031, 8193 & set);
        do Memory.poke(memAddress +1063, 8202 & set);
        do Memory.poke(memAddress +1095, -8178 & set);
        do Memory.poke(memAddress +1127, 1 & set);
        // column 8
        do Memory.poke(memAddress +520, -2048 & set);
        do Memory.poke(memAddress +552, 4064 & set);
        do Memory.poke(memAddress +584, 60 & set);
        do Memory.poke(memAddress +616, -32701 & set);
        do Memory.poke(memAddress +648, -32544 & set);
        do Memory.poke(memAddress +680, -32528 & set);
        do Memory.poke(memAddress +712, -32520 & set);
        do Memory.poke(memAddress +744, -32516 & set);
        do Memory.poke(memAddress +776, ~32767 & set);
        do Memory.poke(memAddress +808, -256 & set);
        do Memory.poke(memAddress +840, 16892 & set);
        do Memory.poke(memAddress +872, -32761 & set);
        do Memory.poke(memAddress +904, ~32767 & set);
        do Memory.poke(memAddress +1000, -16384 & set);
        do Memory.poke(memAddress +1032, 32736 & set);
        do Memory.poke(memAddress +1064, 31 & set);
        do Memory.poke(memAddress +1096, 0 & set);
        // column 9
        do Memory.poke(memAddress +521, 1 & set);
        do Memory.poke(memAddress +553, 15 & set);
        do Memory.poke(memAddress +585, 57 & set);
        do Memory.poke(memAddress +617, 65 & set);
        do Memory.poke(memAddress +649, 192 & set);
        do Memory.poke(memAddress +681, -32704 & set);
        do Memory.poke(memAddress +713, -32672 & set);
        do Memory.poke(memAddress +745, -32720 & set);
        do Memory.poke(memAddress +777, -32752 & set);
        do Memory.poke(memAddress +809, -32744 & set);
        do Memory.poke(memAddress +841, -32760 & set);
        do Memory.poke(memAddress +873, -32760 & set);
        do Memory.poke(memAddress +905, -32764 & set);
        do Memory.poke(memAddress +937, -32761 & set);
        do Memory.poke(memAddress +969, -32766 & set);
        do Memory.poke(memAddress +1001, 3 & set);
        // column 10
        do Memory.poke(memAddress +458, -2048 & set);
        do Memory.poke(memAddress +490, 3968 & set);
        do Memory.poke(memAddress +522, 126 & set);
        do Memory.poke(memAddress +554, 2 & set);
        do Memory.poke(memAddress +586, 4034 & set);
        do Memory.poke(memAddress +618, 4035 & set);
        do Memory.poke(memAddress +650, 1985 & set);
        do Memory.poke(memAddress +682, 449 & set);
        do Memory.poke(memAddress +714, -2048 & set);
        do Memory.poke(memAddress +746, 2047 & set);
        do Memory.poke(memAddress +778, 0 & set);
        do Memory.poke(memAddress +810, 0 & set);
        do Memory.poke(memAddress +842, 0 & set);
        do Memory.poke(memAddress +874, -16384 & set);
        do Memory.poke(memAddress +906, 32752 & set);
        do Memory.poke(memAddress +938, 15 & set);
        do Memory.poke(memAddress +970, 1 & set);
        // column 11
        do Memory.poke(memAddress +459, 15 & set);
        do Memory.poke(memAddress +491, 60 & set);
        do Memory.poke(memAddress +523, 196 & set);
        do Memory.poke(memAddress +555, 774 & set);
        do Memory.poke(memAddress +587, 514 & set);
        do Memory.poke(memAddress +619, 770 & set);
        do Memory.poke(memAddress +651, 259 & set);
        do Memory.poke(memAddress +683, 385 & set);
        do Memory.poke(memAddress +715, 131 & set);
        do Memory.poke(memAddress +747, 66 & set);
        do Memory.poke(memAddress +779, 98 & set);
        do Memory.poke(memAddress +811, 52 & set);
        do Memory.poke(memAddress +843, 28 & set);
        do Memory.poke(memAddress +875, 15 & set);
        do Memory.poke(memAddress +907, 8 & set);
        // column 12
        // column -1
        do Memory.poke(memAddress +191, 256 & set);
        do Memory.poke(memAddress +223, 256 & set);
        do Memory.poke(memAddress +255, 256 & set);
        do Memory.poke(memAddress +287, 256 & set);
        do Memory.poke(memAddress +319, 256 & set);
        do Memory.poke(memAddress +351, 256 & set);
        do Memory.poke(memAddress +383, 768 & set);
        do Memory.poke(memAddress +415, 512 & set);
        do Memory.poke(memAddress +447, 512 & set);
        do Memory.poke(memAddress +479, 1536 & set);
        do Memory.poke(memAddress +511, 1024 & set);
        do Memory.poke(memAddress +543, 3072 & set);
        do Memory.poke(memAddress +575, 6144 & set);
        do Memory.poke(memAddress +607, -4096 & set);
        return;
    }

    method void drawGoUP(bool set) {
	var int memAddress; 
	let memAddress = 16384 + (20 * 32) + (64 / 16);
	// column 0
	do Memory.poke(memAddress +96, -8192 & set);
	do Memory.poke(memAddress +128, 8248 & set);
	do Memory.poke(memAddress +160, 8204 & set);
	do Memory.poke(memAddress +192, 8196 & set);
	do Memory.poke(memAddress +224, 8196 & set);
	do Memory.poke(memAddress +256, 10116 & set);
	do Memory.poke(memAddress +288, 17508 & set);
	do Memory.poke(memAddress +320, -31740 & set);
	do Memory.poke(memAddress +352, 1180 & set);
	do Memory.poke(memAddress +384, 1136 & set);
	do Memory.poke(memAddress +512, -16384 & set);
	do Memory.poke(memAddress +544, 12288 & set);
	do Memory.poke(memAddress +576, 4352 & set);
	do Memory.poke(memAddress +608, 4368 & set);
	do Memory.poke(memAddress +640, -3568 & set);
	do Memory.poke(memAddress +672, 4624 & set);
	do Memory.poke(memAddress +704, 12816 & set);
	do Memory.poke(memAddress +736, 8720 & set);
	do Memory.poke(memAddress +768, 8752 & set);
	do Memory.poke(memAddress +800, 9056 & set);
	do Memory.poke(memAddress +832, 448 & set);
	do Memory.poke(memAddress +864, 1 & set);
	do Memory.poke(memAddress +896, 1 & set);
	do Memory.poke(memAddress +928, 2 & set);
	do Memory.poke(memAddress +960, 4 & set);
	do Memory.poke(memAddress +992, 4 & set);
	do Memory.poke(memAddress +1024, 8 & set);
	do Memory.poke(memAddress +1056, 24 & set);
	do Memory.poke(memAddress +1088, 16 & set);
	do Memory.poke(memAddress +1120, 48 & set);
	do Memory.poke(memAddress +1152, 32 & set);
	do Memory.poke(memAddress +1184, 64 & set);
	do Memory.poke(memAddress +1216, 128 & set);
	do Memory.poke(memAddress +1248, 384 & set);
	do Memory.poke(memAddress +1280, 512 & set);
	do Memory.poke(memAddress +1312, 3072 & set);
	do Memory.poke(memAddress +1344, 6144 & set);
	do Memory.poke(memAddress +1376, 12288 & set);
	do Memory.poke(memAddress +1408, -16384 & set);
	do Memory.poke(memAddress +1440, ~32767 & set);
	// column 1
	do Memory.poke(memAddress +97, 3 & set);
	do Memory.poke(memAddress +129, 2 & set);
	do Memory.poke(memAddress +161, 6 & set);
	do Memory.poke(memAddress +193, 4 & set);
	do Memory.poke(memAddress +225, 12 & set);
	do Memory.poke(memAddress +257, 8 & set);
	do Memory.poke(memAddress +289, 12 & set);
	do Memory.poke(memAddress +321, 5 & set);
	do Memory.poke(memAddress +353, 7 & set);
	do Memory.poke(memAddress +513, 7 & set);
	do Memory.poke(memAddress +545, 4 & set);
	do Memory.poke(memAddress +577, 4 & set);
	do Memory.poke(memAddress +609, 3 & set);
	do Memory.poke(memAddress +641, 1 & set);
	do Memory.poke(memAddress +1409, 0 & set);
	do Memory.poke(memAddress +1441, 1 & set);
	do Memory.poke(memAddress +1473, 3 & set);
	do Memory.poke(memAddress +1505, 2 & set);
	// column -1
	do Memory.poke(memAddress -1, 7168 & set);
	do Memory.poke(memAddress +31, 15360 & set);
	do Memory.poke(memAddress +63, 28160 & set);
	do Memory.poke(memAddress +95, 18944 & set);
	do Memory.poke(memAddress +127, -13568 & set);
	do Memory.poke(memAddress +159, -30464 & set);
	do Memory.poke(memAddress +191, 2304 & set);
	do Memory.poke(memAddress +223, 2048 & set);
	do Memory.poke(memAddress +255, 4096 & set);
	do Memory.poke(memAddress +287, 4096 & set);
	do Memory.poke(memAddress +319, 4096 & set);
	do Memory.poke(memAddress +351, 4096 & set);
	do Memory.poke(memAddress +383, 4096 & set);
	do Memory.poke(memAddress +415, 4096 & set);
	do Memory.poke(memAddress +447, 4096 & set);
	do Memory.poke(memAddress +479, 4096 & set);
	do Memory.poke(memAddress +511, 8192 & set);
	do Memory.poke(memAddress +543, 8192 & set);
	do Memory.poke(memAddress +575, 8192 & set);
	do Memory.poke(memAddress +607, 8192 & set);
	do Memory.poke(memAddress +639, 8192 & set);
	do Memory.poke(memAddress +671, 16384 & set);
	do Memory.poke(memAddress +703, 16384 & set);
	do Memory.poke(memAddress +735, 16384 & set);
	do Memory.poke(memAddress +767, -16384 & set);
	do Memory.poke(memAddress +799, ~32767 & set);
	do Memory.poke(memAddress +831, ~32767 & set);
	return;
}
}