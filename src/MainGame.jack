class MainGame {
   field Square square; // the square of this game
   field boolean exit;
   field int currentLevel;
   field array currentItem_X;
   field array currentItem_Y;
   field array currentItem_level;
   field int currentItem_progress;
   field LevelDrawer levelDrawer;
   field Treasure treasure;
   field Item item;
   field int difficulty;

   /** Constructs a new square game. */
   constructor MainGame new() {
      // The initial square is located in (0,239), has size 15, and is not moving.
      let square = Square.new(0, 239, 15); // new square
      // let square = Square.new(0, 100, 15); // for designing level 4
      let currentLevel = 1;
      let levelDrawer = LevelDrawer.new();
      let currentItem_X = Array.new(11);
      let currentItem_Y = Array.new(11);
      let currentItem_level = Array.new(11);
      let currentItem_X[0] = 224;
      let currentItem_Y[0] = 160;
      let currentItem_level[0] = 1;
      let currentItem_X[1] = 256;
      let currentItem_Y[1] = 40;
      let currentItem_level[1] = 1;
      let currentItem_X[2] = 286;
      let currentItem_Y[2] = 150;
      let currentItem_level[2] = 2;
      let currentItem_X[3] = 16;
      let currentItem_Y[3] = 96;
      let currentItem_level[3] = 2;
      let currentItem_X[4] = 320;
      let currentItem_Y[4] = 120;
      let currentItem_level[4] = 3;
      let currentItem_X[5] = 20;
      let currentItem_Y[5] = 20;
      let currentItem_level[5] = 3;
      let currentItem_X[6] = 480;
      let currentItem_Y[6] = 180;
      let currentItem_level[6] = 4;
      let currentItem_X[7] = 96;
      let currentItem_Y[7] = 85;
      let currentItem_level[7] = 4;
      let currentItem_progress = 0;
      let treasure = Treasure.new(256-32, 10);
      // let item = Item.new(currentItem_X[0], currentItem_Y[0], 32);
      let item = Item.new(currentItem_X[0], currentItem_Y[0], 32);
      let difficulty = 10;
      let exit = false; 
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare(int key) {
      var int levelUp;
      
      if(currentLevel = 6) {
         return;
      }
      if (key = 81)  { let exit = true; }     // q key
      // if (key = 85)  { let currentLevel = currentLevel - 1; let levelUp = 1; } // u key
      //if (key = 88)  { do square.incSize(); } // x key
      if (key = 32) { do square.jump(); }   // up arrow
      if (key = 131) { do square.jump(); }
      // if (key = 133) { let direction = 2; }   // down arrow
      if (key = 130) { do square.setDirection(-1); }   // left arrow
      if (key = 132) { do square.setDirection(1); }   // right arrow
      if (key = 80) { do square.printInfo(); }

      if(currentLevel = currentItem_level[currentItem_progress]) {
         do item.draw(currentLevel);
         if(item.detect(square) = true) {
            do item.erase(currentLevel);
            let currentItem_progress = currentItem_progress + 1;
            do item.update(currentItem_X[currentItem_progress], currentItem_Y[currentItem_progress]);
         }
      }
      if(currentLevel = 5) {
         do treasure.draw(true);
         if(currentItem_progress = 8) {
            if(treasure.detect(square) = true) {
               let currentLevel = 6;
               let exit = true;
               return;
            }
         }
      }
      do levelDrawer.updateLevelMain(currentLevel);
      do square.syncHitbox(levelDrawer.getTime());
      let levelUp = square.move(currentLevel);
      if(~(levelUp = 0)) {
         do item.erase(currentLevel);
         do treasure.draw(false);
         do levelDrawer.eraseLevelMain(currentLevel);
         let currentLevel = currentLevel + levelUp;
         do levelDrawer.drawLevelMain(currentLevel);
      }
      do Sys.wait(difficulty);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var int rep;
      let exit = false;

      let rep = 6;
      do printTitle(true);

      while (~(key = 32)) {
         let key = Keyboard.keyPressed();
         if(key = 131) {
            let difficulty = 10;
            do printTitle(true);
         }
         if(key = 133) {
            let difficulty = 4;
            do printTitle(false);
         }
      }

      do Screen.clearScreen();
      let rep = 3000;
      while(rep > 0) {
         do Output.backSpace();
         let rep = rep - 1;
      }
      do Output.moveCursor(0, 0);
      do levelDrawer.drawLevelMain(currentLevel);
      
      while (~exit) {
         if(currentLevel < 6) {
            // waits for a key to be pressed
            while (key = 0 & (~exit)) {
               let key = Keyboard.keyPressed();
               do square.setDirection(0);
               do moveSquare(key);
            }

            // waits for the key to be released
            while (~(key = 0) & (~exit)) {
               let key = Keyboard.keyPressed();
               do moveSquare(key);
            }
         }
      } // while
      do Screen.clearScreen();
      let rep = 10;
      while(rep > 0) {
         do Output.println();
         let rep = rep - 1;
      }
      do Output.printString("                        CONGRATULATIONS!");
      do Output.println();
      do Output.printString("                        TOTAL JUMPS: ");
      do Output.printInt(square.getJumpCount());
      do Output.println();
      return;
   }

   method void printTitle(bool di) {
      var char rep; 

      do Screen.clearScreen();
      let rep = 3000;
      while(rep > 0) {
         do Output.backSpace();
         let rep = rep - 1;
      }
      do Output.moveCursor(0, 0);
      let rep = 8;
      while(rep > 0) {
         do Output.println();
         let rep = rep - 1;
      }
      do Output.printString("                   Wen Square's Adventure");
      do Output.println();
      do Output.printString("       Use Up & Down to select mode, press Space to start");
      do Output.println();
      do Output.println();
      do Output.println();
      if(di = true) {
         do Output.printString("                        > Baby Mode <");
         do Output.println();
         do Output.printString("                        Real Man Mode");
         do Output.println();
      }
      else {
         do Output.printString("                          Baby Mode");
         do Output.println();
         do Output.printString("                      > Real Man Mode <");
         do Output.println();
      }
      return;
   }
}



