class Hitbox {

    field int xStat, yStat, vyStat;
    field bool stableStat;
    field int buffer;
    field int time;
    field int levelUp;

    constructor Hitbox new() {
        let xStat = 0;
        let yStat = 0;
        let vyStat = 0;
        let stableStat = false;
        let buffer = 1;
        let time = 0;
        let levelUp = 0;
        return this;
    }

    method int getX() { return xStat; }
    method int getY() { return yStat; }
    method int getVY() { return vyStat; }
    method bool getStable() { return stableStat; }
    method bool getLevelUp() { return levelUp; }
    method void setTime(int t) { 
        let time = t;
        return;
    }

    // hitbox.detectMain(level, x, y, vy, isStable, size);
    method void detectMain(int level, int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;
        let levelUp = 0;
        
        if(level = 0) {
            do detectLevel0(x, y, vy, s, size);
        }
        if(level = 1) {
            do detectLevel1(x, y, vy, s, size);
        }
        if(level = 2) {
            do detectLevel2(x, y, vy, s, size);
        }
        if(level = 3) {
            do detectLevel3(x, y, vy, s, size);
        }
        if(level = 4) {
            do detectLevel4(x, y, vy, s, size);
        }
        if(level = 5) {
            do detectLevel5(x, y, vy, s, size);
        }
        return;
    }

    method void detectLevel0(int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;
        
        if(xStat < 1) {
            let xStat = 1;
        }
        if((xStat + size) > 510) {
            let xStat = 510 - size;
        }
        if(yStat < 1) {
            let yStat = 1;
            let vyStat = 0;
        }
        if((yStat + size) > 254) {
            let yStat = 254 - size;
            let vyStat = 0;
            let stableStat = true;
        }
        return;
    }
    
    method void detectLevel1(int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;
        
        do detectSquare(0, 450, 127, 137, xStat, yStat, size); // mid floor
        // to lowerhalf
        do detectSquare(0, 25, 122, 152, xStat, yStat, size); // AmongUs1
        do detectSquare(470, 510, 194, 254, xStat, yStat, size); // right step up
        do detectSquare(50, 90, 214, 254, xStat, yStat, size); // first step
        do detectSquare(50, 80, 158, 182, xStat, yStat, size); // AmongUsEye
        do detectSquare(125, 145, 170, 254, xStat, yStat, size); // second step
        do detectSquare(110, 145, 127, 146, xStat, yStat, size); // second step head
        do detectSquare(200, 280, 234, 254, xStat, yStat, size); // third step
        // do detectSquare(200, 250, 160, 162, xStat, yStat, size); // place item 1
        do detectSquare(300, 330, 170, 230, xStat, yStat, size); // fourth step
        do detectSquare(380, 420, 170, 254, xStat, yStat, size); // fifth step
        // to upperhalf
        do detectSquare(380, 430, 112, 127, xStat, yStat, size); // up1
        do detectSquare(460, 510, 55, 75, xStat, yStat, size); // up2
        do detectSquare(368, 370, 30, 85, xStat, yStat, size); // wall b/w 13
        do detectSquare(300, 360, 30, 50, xStat, yStat, size); // up3
        do detectSquare(180, 240, 30, 50, xStat, yStat, size); // up4
        do detectSquare(120, 122, 30, 127, xStat, yStat, size); // wall b/w 45
        
        do detectSquare(0, 25, 20, 130, xStat, yStat, size); // stair 1
        do detectSquare(0, 55, 52, 130, xStat, yStat, size); // stair 2
        do detectSquare(0, 85, 87, 130, xStat, yStat, size); // stair 3

        do detectWall(xStat, yStat, size);
        if((yStat + size) > 254) {
            let yStat = 254 - size;
            let vyStat = 0;
            let stableStat = true;
        }
        do detectHeight(xStat, yStat, size);

        return;
    }

    method void detectLevel2(int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;

        do detectSquare(35, 80, 239, 254, xStat, yStat, size); // lvl2 1
        // do detectSquare(0, 510, 40, 41, xStat, yStat, size); // construction floor
        
        do detectMovingSquare(100, 170, 200, 220, 220, 290, 200, 220, 300, xStat, yStat, size, true); // moving plate 1
        do detectMovingSquare(400, 470, 200, 220, 310, 380, 200, 220, 300, xStat, yStat, size, true); // moving plate 2
        do detectMovingSquare(180, 185, 130, 180, 180, 185, 204, 254, 86, xStat, yStat, size, true); // moving obstacle 1
        //do detectSquare(470, 510, 190, 200, xStat, yStat, size); // lvl2 2
        do detectMovingSquare(420, 460, 170, 180, 460, 500, 80, 180, 173, xStat, yStat, size, true); // lvl2 3
        do detectSquare(410, 450, 85, 95, xStat, yStat, size); // lvl2 4
        do detectMovingSquare(320, 360, 110, 130, 320, 360, 30, 130, 160, xStat, yStat, size, true); // expand stand 1
        do detectMovingSquare(230, 270, 30, 130, 230, 270, 110, 130, 160, xStat, yStat, size, true); // expand stand 2
        do detectMovingSquare(105, 125, 110, 130, 60, 170, 50, 130, 270, xStat, yStat, size, true); // expand stand 3
        
        do detectSquare(10, 50, 130, 140, xStat, yStat, size); // place item 2
        do detectSquare(10, 50, 20, 30, xStat, yStat, size); // lvl2 5



        do detectWall(xStat, yStat, size);
        do detectHeight(xStat, yStat, size);

        return;
    }

    method void detectLevel3(int x, int y, int vy, bool s, int size) {

        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;

        do detectSquare(50, 160, 244, 254, xStat, yStat, size); // lvl3 1
        // do detectSquare(0, 510, 53, 54, xStat, yStat, size); // construction floor
        //method void detectTriangle(int x1, int y1, int x2, int y2, int x, int y, int size) {
        if(yStat > 140) {
            do detectTriangle(90, 244, 160, 194, xStat, yStat, size); // tri 1
            do detectSquare(160, 162, 194, 254, xStat, yStat, size); // triside 1
            do detectSquare(160, 210, 194, 204, xStat, yStat, size); // lvl3 2
            do detectSquare(280-5, 325, 214, 254, xStat, yStat, size); // lvl3 3
            do detectTriangle(220, 254, 280-5, 214, xStat, yStat, size); // tri 2
            do detectTriangle(325, 214, 380, 254, xStat, yStat, size); // tri 3
            do detectSquare(450, 510, 214, 254, xStat, yStat, size); // lvl3 4
            do detectTriangle(415, 254, 450, 214, xStat, yStat, size); // tri 4
        }

        do detectSquare(450, 490, 155, 160, xStat, yStat, size); // lvl3 stair 1
        do detectSquare(470, 510, 115, 120, xStat, yStat, size); // lvl3 stair 2
        do detectSquare(450, 490, 75, 80, xStat, yStat, size); // lvl3 stair 3
        do detectSquare(445, 450, 75, 160, xStat, yStat, size); // lvl3 stair wall

        if(yStat < 80) {
            do detectTriangle(300, 8, 315, 23, xStat, yStat, size); // Xmas tree R1
            do detectTriangle(300, 16, 322, 38, xStat, yStat, size); // Xmas tree R2
            do detectTriangle(300, 29, 329, 55, xStat, yStat, size); // Xmas tree R3
            do detectTriangle(300+5, 43, 337, 73, xStat, yStat, size); // Xmas tree R4
            
            do detectTriangle(285, 23, 300, 8, xStat, yStat, size); // Xmas tree L1
            do detectTriangle(278, 38, 300, 16, xStat, yStat, size); // Xmas tree L2
            do detectTriangle(271, 55, 300, 29, xStat, yStat, size); // Xmas tree L3
            do detectTriangle(263, 73, 300-5, 43, xStat, yStat, size); // Xmas tree L4
        }

        do detectSquare(300-8, 308, 43, 95, xStat, yStat, size); // Xmas tree
        
        do detectSquare(360, 400, 70, 80, xStat, yStat, size); // lvl3 up 1
        // do detectSquare(180, 235, 60, 70, xStat, yStat, size); // lvl3 up 2
        do detectSquare(140, 140, 60, 100, xStat, yStat, size); // triside 1
        // do detectSquare(140, 190-1, 100, 101, xStat, yStat, size); // triside 1
        do detectTriangle(140, 60, 200, 100, xStat, yStat, size); // tri 1
        // do detectSquare(160, 200, 130, 135, xStat, yStat, size); // lvl3 up 3
        do detectSquare(240, 240, 100, 140, xStat, yStat, size); // triside 2
        do detectTriangle(180, 140, 240, 100, xStat, yStat, size); // tri 2
        do detectSquare(130, 180, 140, 150, xStat, yStat, size); // lvl3 up 4
        // do detectSquare(140, 200, 10, 20, xStat, yStat, size); // head
        
        do detectSquare(0, 50, 80, 90, xStat, yStat, size); // lvl3 up 5
        do detectTriangle(50, 80, 80, 130, xStat, yStat, size); // tri 5
        do detectSquare(100, 160, 30, 40, xStat, yStat, size); // lvl3 up 5
        

        do detectWall(xStat, yStat, size);
        do detectHeight(xStat, yStat, size);

        return;
    }

    method void detectLevel4(int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;
        
        do detectSquare(0, 450, 252, 254, xStat, yStat, size); // construction floor
        
        do detectSquare(0, 450, 122, 132, xStat, yStat, size); // mid floor
        do detectSquare(0, 80, 244, 254, xStat, yStat, size); // lvl4 1
        do detectMovingSquare(100, 260, 225, 240, 400, 480, 225, 240, 320, xStat, yStat, size, true);
        // do detectSquare(100, 460, 225, 240, xStat, yStat, size); // moving square

        do detectSquare(170, 190, 180, 225, xStat, yStat, size); // twin tower
        do detectSquare(230, 250, 180, 225, xStat, yStat, size); // twin tower

        do detectSquare(190, 190+1, 170, 225, xStat, yStat, size); // triside
        do detectTriangle(170, 180, 190, 170, xStat, yStat, size); // tri 1
        do detectSquare(250, 250+1, 170, 225, xStat, yStat, size); // triside
        do detectTriangle(230, 180, 250, 170, xStat, yStat, size); // tri 2

        do detectSquare(300, 315, 165, 225, xStat, yStat, size); // pillar 1
        do detectSquare(300, 315, 130, 140, xStat, yStat, size); // pillar 1
        do detectSquare(360, 375, 210, 225, xStat, yStat, size); // pillar 2
        do detectSquare(360, 375, 130, 185, xStat, yStat, size); // pillar 2
        do detectSquare(420, 435, 180, 225, xStat, yStat, size); // pillar 3
        do detectSquare(420, 435, 130, 155, xStat, yStat, size); // pillar 3
        
        do detectSquare(475, 510, 160, 170, xStat, yStat, size); // step up
        
        do detectSquare(82, 92, 82, 122, xStat, yStat, size); // house
        do detectSquare(132, 142, 82, 122, xStat, yStat, size); 
        do detectTriangle(82, 82, 102, 62, xStat, yStat, size);
        do detectTriangle(122, 62, 142, 82, xStat, yStat, size); 
        
        do detectSquare(0, 40, 75, 82, xStat, yStat, size); 
        do detectSquare(30, 70, 20, 27, xStat, yStat, size); 
        

        do detectWall(xStat, yStat, size);
        do detectHeight(xStat, yStat, size);

        return;
    }

    method void detectLevel5(int x, int y, int vy, bool s, int size) {
        let xStat = x;
        let yStat = y;
        let vyStat = vy;
        let stableStat = s;

        do detectSquare(60, 510, 246, 254, xStat, yStat, size); // lvl5 floor
        do detectSquare(100, 200, 187, 197, xStat, yStat, size); // lvl5 floor
        do detectSquare(180, 330, 128, 138, xStat, yStat, size); // lvl5 floor
        do detectSquare(310, 410, 187, 197, xStat, yStat, size); // lvl5 floor
        do detectSquare(230, 280, 69, 79, xStat, yStat, size); // lvl5 floor

        do detectWall(xStat, yStat, size);
        do detectHeight(xStat, yStat, size);

        return;
    }

    // API for detectings

    method void detectWall(int x, int y, int size) {
        if(x < 0) {
            let xStat = 0;
        }
        if((x + size) > 510) {
            let xStat = 510 - size;
        }
        return;
    }

    method void detectHeight(int x, int y, int size) {
        if((y + size) < 0) {
            let levelUp = 1;
            let yStat = 254 + y + size;
            // let vyStat = 0;
        }
        if(y > 254) {
            let levelUp = -1;
            let yStat = y - 254;
        }
        return;
    }

    method void detectSquare(int rxL, int rxR, int ryU, int ryD, int x, int y, int size) {
        var int xL, xR, yU, yD;
        let xL = rxL - buffer;
        let xR = rxR + buffer;
        let yU = ryU - buffer;
        let yD = ryD + buffer;
        if(((x + size) > xL) & (x < xR)) {
            if((y < yD) & ((y + size) > yD)) {
                // do Output.printString("YD EDGE!");
                // do Output.println();
                let yStat = yD;
                let vyStat = 0;
            }
            if(((y + size) > yU) & (y < yU)) {
                //do Output.printString("YU EDGE!");
                // do Output.println();
                let yStat = yU - size;
                let vyStat = 0;
                let stableStat = true;
            }
        }
        if(((yStat + size) > yU) & (yStat < yD)) {
            if((x < xR) & ((x + size) > xR)) {
                // do Output.printString("XR EDGE!");
                // do Output.println();
                let xStat = xR;
            }
            if(((x + size) > xL) & (x < xL)) {
                // do Output.printString("XL EDGE!");
                // do Output.println();
                let xStat = xL - size;
            }
        }
        return;
    }


    method void detectMovingSquare(int rxLi, int rxRi, int ryUi, int ryDi, 
                                    int rxLf, int rxRf, int ryUf, int ryDf, int duration,
                                    int x, int y, int size, bool back) {
        var int xL, xR, yU, yD;
        var int progress;
        if(back = false) {
            let progress = time / duration;
            let progress = (time - (progress * duration));
            let progress = (progress * 50) / duration;
            let xL = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
            let xR = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
            let yU = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
            let yD = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
        }
        if(back = true) {
            let progress = time / (2 * duration);
            let progress = (time - (progress * (2 * duration)));
            let progress = (progress * 50) / duration;
            if(progress > 50) {
                let progress = progress - 50;
                let xL = ((rxLi * progress) + (rxLf * (50 - progress))) / 50;
                let xR = ((rxRi * progress) + (rxRf * (50 - progress))) / 50;
                let yU = ((ryUi * progress) + (ryUf * (50 - progress))) / 50;
                let yD = ((ryDi * progress) + (ryDf * (50 - progress))) / 50;
            }
            else {
                let xL = ((rxLi * (50 - progress)) + (rxLf * progress)) / 50;
                let xR = ((rxRi * (50 - progress)) + (rxRf * progress)) / 50;
                let yU = ((ryUi * (50 - progress)) + (ryUf * progress)) / 50;
                let yD = ((ryDi * (50 - progress)) + (ryDf * progress)) / 50;
            }
        }
        do detectSquare(xL, xR, yU, yD, x, y, size);
        return;
    }

    method void detectTriangle(int x1, int y1, int x2, int y2, int x, int y, int size) {
        var int xLoc, yLoc, top;
        if(~(((x1 - 1) < (x + size)) & (x < (x2 + 1)))) {
            return;
        }
        if(y1 > y2) { // if y1 > y2 (/), check x + size, y + size
            // do detectSquare(x1, x2, y1 - 1, y1, x, y, size);
            if(yStat > y1) {
                return;
            }
            let xLoc = xStat + size;
            let yLoc = yStat + size;
            let top = detectTriangleAux(x1, y1, x2, y2, yLoc);
            if(top < 0) {
                if((vyStat < 0) & (yLoc > y1)) {
                    let vyStat = 0;
                    let yStat = y1;
                }
                return;
            }
            if(xLoc > top) {
                let stableStat = false;
                let xStat = top - size - 4;
            }
        }
        else { // if y1 < y2 (\), check x, y + size
            // do detectSquare(x1, x2, y2 - 1, y2, x, y, size);
            if(yStat > y2) {
                return;
            }
            let xLoc = xStat;
            let yLoc = yStat + size;
            let top = detectTriangleAux(x1, y1, x2, y2, yLoc);
            if(top < 0) {
                if((vyStat < 0) & (yLoc > y2)) {
                    let vyStat = 0;
                    let yStat = y2;
                }
                return;
            }
            if(xLoc < top) {
                let stableStat = false;
                let xStat = top + 4;
            }
        }
        return;
    }

    method int detectTriangleAux(int x1, int y1, int x2, int y2, int goal) {
        var int midx, midy, result;
        let midx = (x1 + x2) / 2;
        let midy = (y1 + y2) / 2;
        if(~(((y1 - 1 < goal) & (y2 + 1 > goal)) | ((y2 - 1 < goal) & (y1 + 1 > goal)))) {
            return -1;
        }
        else {
            // do Output.printString("X: ");
            // do Output.printInt(midx);
            // do Output.printString(", Y: ");
            // do Output.printInt(midy);
            // do Output.println();
            if(midy = goal) {
                return midx;
            }
            else {
                if(y1 < y2) { // (\)
                    if(goal < midy) {
                        let result = detectTriangleAux(x1, y1, midx, midy - 1, goal);
                        return result;
                    }
                    if(goal > midy) {
                        let result = detectTriangleAux(midx, midy + 1, x2, y2, goal);
                        return result;
                    }
                }
                else { // (/)
                    if(goal < midy) {
                        let result = detectTriangleAux(midx, midy - 1, x2, y2, goal);
                        return result;
                    }
                    if(goal > midy) {
                        let result = detectTriangleAux(x1, y1, midx, midy + 1, goal);
                        return result;
                    }
                }
            }
        }
        return -1;
    }
}